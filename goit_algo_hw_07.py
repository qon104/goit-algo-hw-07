from collections import UserDict
from datetime import datetime, timedelta

# ------------------- Field -------------------
class Field:
    def __init__(self, value):
        self.value = value

class Name(Field):
    pass

class Phone(Field):
    def __init__(self, value):
        if not (isinstance(value, str) and value.isdigit() and len(value) == 10):
            raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä")
        super().__init__(value)

class Birthday(Field):
    def __init__(self, value):
        try:
            datetime.strptime(value, "%d.%m.%Y")
            super().__init__(value)
        except ValueError:
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†")

# ------------------- Record -------------------
class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.birthday = None

    def add_phone(self, phone):
        self.phones.append(Phone(phone))

    def remove_phone(self, phone):
        self.phones = [p for p in self.phones if p.value != phone]

    def edit_phone(self, old, new):
        for i, p in enumerate(self.phones):
            if p.value == old:
                self.phones[i] = Phone(new)
                return True
        return False

    def add_birthday(self, bday):
        self.birthday = Birthday(bday)

# ------------------- AddressBook -------------------
class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def get_upcoming_birthdays(self):
        today = datetime.today().date()
        upcoming = []
        for record in self.data.values():
            if record.birthday:
                bday = datetime.strptime(record.birthday.value, "%d.%m.%Y").date()
                bday_this_year = bday.replace(year=today.year)
                if today <= bday_this_year <= today + timedelta(days=7):
                    greet_day = bday_this_year
                    if greet_day.weekday() >= 5:
                        greet_day += timedelta(days=(7 - greet_day.weekday()))
                    upcoming.append({"name": record.name.value, "birthday": greet_day.strftime("%d.%m.%Y")})
        return upcoming

# ------------------- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–æ–º–∏–ª–æ–∫ -------------------
def input_error(func):
    def wrapper(*args):
        try:
            return func(*args)
        except (IndexError, ValueError) as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
    return wrapper

# ------------------- –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥ -------------------
@input_error
def add_contact(args, book):
    name, phone, *_ = args
    record = book.find(name)
    message = "–ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ."
    if record is None:
        record = Record(name)
        book.add_record(record)
        message = "–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–¥–∞–Ω–æ."
    record.add_phone(phone)
    return message

@input_error
def change_contact(args, book):
    name, old_phone, new_phone = args
    record = book.find(name)
    if record and record.edit_phone(old_phone, new_phone):
        return "–ù–æ–º–µ—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ."
    return "–ö–æ–Ω—Ç–∞–∫—Ç –∞–±–æ –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

@input_error
def show_phones(args, book):
    name = args[0]
    record = book.find(name)
    if record:
        return ", ".join([p.value for p in record.phones])
    return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

def show_all(book):
    result = []
    for record in book.data.values():
        phones = ", ".join([p.value for p in record.phones])
        bday = f", –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {record.birthday.value}" if record.birthday else ""
        result.append(f"{record.name.value}: {phones}{bday}")
    return "\n".join(result) if result else "–ê–¥—Ä–µ—Å–Ω–∞ –∫–Ω–∏–≥–∞ –ø–æ—Ä–æ–∂–Ω—è."

@input_error
def add_birthday(args, book):
    name, bday = args
    record = book.find(name)
    if not record:
        return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    record.add_birthday(bday)
    return "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ."

@input_error
def show_birthday(args, book):
    name = args[0]
    record = book.find(name)
    if record and record.birthday:
        return record.birthday.value
    return "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

@input_error
def birthdays(args, book):
    upcoming = book.get_upcoming_birthdays()
    if not upcoming:
        return "–ù–µ–º–∞—î –Ω–∞–π–±–ª–∏–∂—á–∏—Ö –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è."
    return "\n".join([f"{p['name']}: {p['birthday']}" for p in upcoming])

# ------------------- –ü–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥ -------------------
def parse_input(user_input):
    parts = user_input.strip().split()
    return parts[0].lower(), parts[1:]

# ------------------- –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ -------------------
def print_commands():
    print("\n–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞!")
    print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
    print(" add [—ñ–º'—è] [—Ç–µ–ª–µ—Ñ–æ–Ω]             - –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∞–±–æ –Ω–æ–º–µ—Ä")
    print(" change [—ñ–º'—è] [—Å—Ç–∞—Ä–∏–π] [–Ω–æ–≤–∏–π]   - –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    print(" phone [—ñ–º'—è]                     - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É")
    print(" all                              - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
    print(" add-birthday [—ñ–º'—è] [–¥–∞—Ç–∞]       - –î–æ–¥–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†)")
    print(" show-birthday [—ñ–º'—è]             - –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É")
    print(" birthdays                        - –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 7 –¥–Ω—ñ–≤")
    print(" hello                            - –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è")
    print(" close / exit                     - –í–∏–π—Ç–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏\n")

# ------------------- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ -------------------
def main():
    print_commands()
    book = AddressBook()
    while True:
        user_input = input("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É: ").strip()
        
        if not user_input:  # üî∏ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤–≤—ñ–¥
            continue

        command, args = parse_input(user_input)

        if command in ["close", "exit"]:
            print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break

        elif command == "hello":
            print("–ü—Ä–∏–≤—ñ—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")

        elif command == "add":
            print(add_contact(args, book))

        elif command == "change":
            print(change_contact(args, book))

        elif command == "phone":
            print(show_phones(args, book))

        elif command == "all":
            print(show_all(book))

        elif command == "add-birthday":
            print(add_birthday(args, book))

        elif command == "show-birthday":
            print(show_birthday(args, book))

        elif command == "birthdays":
            print(birthdays(args, book))

        else:
            print("–ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å 'hello' –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.")

if __name__ == '__main__':
    main()
